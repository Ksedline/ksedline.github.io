{"version":3,"sources":["View.ts","index.js","App.tsx"],"names":["Main","Phaser","Class","Extends","Scene","value","initialize","call","this","key","preload","load","image","create","matter","world","setBounds","View","context","config","type","AUTO","width","height","backgroundColor","parent","scene","physics","default","game","init","Game","destroy","update","Math","floor","i","setTimeout","a","async","add","Between","setFriction","setName","setBounce","setScale","setOnCollideWith","walls","bottom","localWorld","bodies","length","object","ReactDOM","render","useState","setValue","useEffect","className","id","onChange","event","Number","target","htmlFor","document","getElementById"],"mappings":"2OAGMA,EAAO,IAAIC,IAAOC,MAAM,CAC5BC,QAASF,IAAOG,MAChBC,MAAO,EACPC,WAAY,WACVL,IAAOG,MAAMG,KAAKC,KAAM,CAAEC,IAAK,UAEjCC,QAAS,WACPF,KAAKG,KAAKC,MAAM,SAAU,sBAE5BC,OAAQ,WACNL,KAAKM,OAAOC,MAAMC,UAAU,EAAG,EAAG,IAAK,IAAK,IAAI,GAAM,GAAM,GAAO,GACnEC,EAAKC,QAAQL,OAASL,QAIpBW,EAAuC,CAC3CC,KAAMnB,IAAOoB,KACbC,MAAO,IACPC,OAAQ,IACRC,gBAAiB,OACjBC,OAAQ,OACRC,MAAO,CAAC1B,GACR2B,QAAS,CACPC,QAAS,WAIAX,EAAO,CAClBY,KAAM,GACNX,QAAS,CACPL,OAAQ,MAEViB,KAAM,WACJb,EAAKY,KAAO,IAAI5B,IAAO8B,KAAKZ,IAE9Ba,QAAS,WACP,IAEMf,EAAKY,MAAMZ,EAAKY,KAAKG,UAF3B,WAKFC,OAAQ,SAAqB5B,GAAgB,IAAD,OAC1CG,KAAKH,MAAQ6B,KAAKC,MAAM9B,EAAQ,KAAO,EAEvC,IAH0C,eAGjC+B,GACPC,YAAW,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACyC,EAAKxB,OAAO0B,IAC3D5B,MAAMX,IAAOiC,KAAKO,QAAQ,IAAK,KAAMxC,IAAOiC,KAAKO,SAAS,IAAK,GAAI,UACnEC,YAAY,IACZC,QAAQ,UAAYP,GACpBQ,UAAU,IACVC,SAAS,IACTC,iBAAiB,EAAKhC,OAAOC,MAAMgC,MAAMC,QAAQ,kBAAMX,YAAW,WAC7D,EAAKvB,OAAOC,MAAMkC,WAAWC,OAAOC,OAAS,GAAGC,EAAOpB,YAC1D,SATI,OACHoB,EADG,8CAUR,MAXIhB,EAAI,EAAGA,EAAI5B,KAAKH,MAAO+B,IAAM,EAA7BA,K,gBC1CbiB,IAASC,OAAO,mBCAJ,WAAO,IAAD,EACcC,mBAAS,GADvB,mBACTlD,EADS,KACFmD,EADE,KAUhB,OAPAC,qBAAU,WAER,OADAxC,EAAKa,OACE,WACLb,EAAKe,aAEN,IAGD,yBAAK0B,UAAU,OACb,6BACA,oVACA,6BACA,oCACE,2BAAOC,GAAG,SAAStD,MAAOA,EAAOuD,SAAU,SAACC,GAC1C5C,EAAKgB,OAAO1B,KAAKU,EAAKC,QAAQL,OAAQiD,OAAOD,EAAME,OAAO1D,QAC1DmD,EAASK,EAAME,OAAO1D,UAEvB,IACD,2BAAO2D,QAAQ,UAAf,yCAEF,6BACA,8BAAM,0PACN,6BACA,oCACE,yBAAKL,GAAG,aD3BA,MAASM,SAASC,eAAe,U","file":"static/js/main.454aed97.chunk.js","sourcesContent":["import Phaser from 'phaser';\r\n\r\n// @ts-ignore\r\nconst Main = new Phaser.Class({\r\n  Extends: Phaser.Scene,\r\n  value: 0,\r\n  initialize: function Main() {\r\n    Phaser.Scene.call(this, { key: 'Main' });\r\n  },\r\n  preload: function () {\r\n    this.load.image('doshik', 'assets/doshik.png');\r\n  },\r\n  create: function (this: any) {\r\n    this.matter.world.setBounds(0, 0, 800, 600, 32, true, true, false, true);\r\n    View.context.create = this;\r\n  }\r\n});\r\n\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n  type: Phaser.AUTO,\r\n  width: 800,\r\n  height: 600,\r\n  backgroundColor: '#fff',\r\n  parent: 'view',\r\n  scene: [Main],\r\n  physics: {\r\n    default: 'matter'\r\n  },\r\n};\r\n\r\nexport const View = {\r\n  game: {},\r\n  context: {\r\n    create: null,\r\n  },\r\n  init: () => {\r\n    View.game = new Phaser.Game(config);\r\n  },\r\n  destroy: () => {\r\n    try {\r\n      // @ts-ignore\r\n      if (View.game) View.game.destroy();\r\n    } finally {}\r\n  },\r\n  update: function (this: any, value: number) {\r\n    this.value = Math.floor(value / 40) || 0;\r\n\r\n    for (let i = 0; i < this.value; i++) {\r\n      setTimeout(async () => {\r\n        const object: Phaser.Physics.Matter.Image = await this.matter.add\r\n          .image(Phaser.Math.Between(100, 700), Phaser.Math.Between(-600, 0), 'doshik')\r\n          .setFriction(0.1)\r\n          .setName('Doshik0' + i)\r\n          .setBounce(0.5)\r\n          .setScale(0.1)\r\n          .setOnCollideWith(this.matter.world.walls.bottom, () => setTimeout(() => {\r\n            if (this.matter.world.localWorld.bodies.length > 3) object.destroy();\r\n          }, 250));\r\n      }, 1000);\r\n    }\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useEffect, useState } from 'react';\nimport { View } from './View';\nimport './App.css';\n\n\nconst App = () => {\n  const [value, setValue]:any = useState(0);\n\n  useEffect(() => {\n    View.init();\n    return () => {\n      View.destroy();\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <br />\n      <h2>Введите вашу зарплату чтобы узнать сколько это в дошираках</h2>\n      <br />\n      <>\n        <input id=\"amount\" value={value} onChange={(event) => {\n          View.update.call(View.context.create, Number(event.target.value));\n          setValue(event.target.value);\n        }}  />\n        {' '}\n        <label htmlFor=\"amount\">Рублей</label>\n      </>\n      <br />\n      <span><i>1 Доширак = 40 рублей (по Данным Яндекс.Маркета)</i></span>\n      <br />\n      <>\n        <div id=\"view\" />\n      </>\n    </div>\n  );\n}\n\nexport { App };\n"],"sourceRoot":""}